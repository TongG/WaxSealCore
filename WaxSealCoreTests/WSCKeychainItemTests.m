/*==============================================================================┐
|              _  _  _       _                                                  |  
|             (_)(_)(_)     | |                            _                    |██
|              _  _  _ _____| | ____ ___  ____  _____    _| |_ ___              |██
|             | || || | ___ | |/ ___) _ \|    \| ___ |  (_   _) _ \             |██
|             | || || | ____| ( (__| |_| | | | | ____|    | || |_| |            |██
|              \_____/|_____)\_)____)___/|_|_|_|_____)     \__)___/             |██
|                                                                               |██
|      _  _  _              ______             _ _______                  _     |██
|     (_)(_)(_)            / _____)           | (_______)                | |    |██
|      _  _  _ _____ _   _( (____  _____ _____| |_       ___   ____ _____| |    |██
|     | || || (____ ( \ / )\____ \| ___ (____ | | |     / _ \ / ___) ___ |_|    |██
|     | || || / ___ |) X ( _____) ) ____/ ___ | | |____| |_| | |   | ____|_     |██
|      \_____/\_____(_/ \_|______/|_____)_____|\_)______)___/|_|   |_____)_|    |██
|                                                                               |██
|                                                                               |██
|                                                                               |██
|                           Copyright (c) 2015 Tong Guo                         |██
|                                                                               |██
|                               ALL RIGHTS RESERVED.                            |██
|                                                                               |██
└===============================================================================┘██
  █████████████████████████████████████████████████████████████████████████████████
  ███████████████████████████████████████████████████████████████████████████████*/

#import <XCTest/XCTest.h>

#import "WSCKeychain.h"
#import "WSCPassphraseItem.h"
#import "WSCKeychainItem.h"
#import "NSURL+WSCKeychainURL.h"
#import "WSCKeychainError.h"
#import "WSCKeychainManager.h"

WSCInternetProtocolType _WSCProtocols[] =
    { WSCInternetProtocolTypeFTP
    , WSCInternetProtocolTypeFTPAccount
    , WSCInternetProtocolTypeHTTP
    , WSCInternetProtocolTypeIRC
    , WSCInternetProtocolTypeNNTP
    , WSCInternetProtocolTypePOP3
    , WSCInternetProtocolTypeSMTP
    , WSCInternetProtocolTypeSOCKS
    , WSCInternetProtocolTypeIMAP
    , WSCInternetProtocolTypeLDAP
    , WSCInternetProtocolTypeAppleTalk
    , WSCInternetProtocolTypeAFP
    , WSCInternetProtocolTypeTelnet
    , WSCInternetProtocolTypeSSH
    , WSCInternetProtocolTypeFTPS
    , WSCInternetProtocolTypeHTTPS
    , WSCInternetProtocolTypeHTTPProxy
    , WSCInternetProtocolTypeHTTPSProxy
    , WSCInternetProtocolTypeFTPProxy
    , WSCInternetProtocolTypeCIFS
    , WSCInternetProtocolTypeSMB
    , WSCInternetProtocolTypeRTSP
    , WSCInternetProtocolTypeRTSPProxy
    , WSCInternetProtocolTypeDAAP
    , WSCInternetProtocolTypeEPPC
    , WSCInternetProtocolTypeIPP
    , WSCInternetProtocolTypeNNTPS
    , WSCInternetProtocolTypeLDAPS
    , WSCInternetProtocolTypeTelnetS
    , WSCInternetProtocolTypeIMAPS
    , WSCInternetProtocolTypeIRCS
    , WSCInternetProtocolTypePOP3S
    , WSCInternetProtocolTypeCVSpserver
    , WSCInternetProtocolTypeSVN
    };

NSString* _WSCHostsForPositiveTests[] =
    { @"https://twitter.com"
    , @"www.waxsealcore.org"
    , @"www.facebook.com"
    , @"nstongg.tumblr.com"
    , @"github.com"
    , @"encrypted.google.com"
    , @"duckduckgo.com"
    };

// The random passphrases generated by 1Password
NSString* _WSCPassphrases[] =
    { @"hof{pog@vek$kois=jaw)"
    , @"du)ow^ab#vut[ni=a"
    , @"eap=yem+coc#beg^oill#"
    , @"cid,at<gex#def@hob%le"
    , @"af>mok?gheig&vit%ick<"
    , @"feam&ryop[juf,my(har$"
    };

// --------------------------------------------------------
#pragma mark Interface of WSCKeychainItemTests case
// --------------------------------------------------------
@interface WSCKeychainItemTests : XCTestCase
@end

// --------------------------------------------------------
#pragma mark Implementation of WSCKeychainItemTests case
// --------------------------------------------------------
@implementation WSCKeychainItemTests

- ( void ) setUp
    {
    // TODO: Put setup code here. This method is called before the invocation of each test method in the class.
    }

- ( void ) tearDown
    {
    // TODO: Put teardown code here. This method is called after the invocation of each test method in the class.
    }

- ( void ) testInvisibleProperty
    {
    NSError* error = nil;

    _WSCFillErrorParamWithSecErrorCode( errSecUnimplemented, &error );
    NSLog( @"%@", error );

    // -------------------------------------------------------------------------------
    // Positive Test Case 0: for Application passphrase item
    // -------------------------------------------------------------------------------
    WSCPassphraseItem* applicationPassphrase_testCase0 =
        [ [ WSCKeychain login ] addApplicationPassphraseWithServiceName: @"WaxSealCore Unit Tests"
                                                            accountName: @"NSTongG"
                                                             passphrase: @"waxsealcore"
                                                                  error: &error ];
    XCTAssertFalse( applicationPassphrase_testCase0.isInvisible );
    XCTAssertFalse( applicationPassphrase_testCase0.isNegative );
    applicationPassphrase_testCase0.isInvisible = YES;
    applicationPassphrase_testCase0.isNegative = YES;
    XCTAssertTrue( applicationPassphrase_testCase0.isInvisible );
    XCTAssertTrue( applicationPassphrase_testCase0.isNegative );

    [ applicationPassphrase_testCase0.keychain deleteKeychainItem: applicationPassphrase_testCase0 error: nil ];

    // -------------------------------------------------------------------------------
    // Positive Test Case 1: for Internet passphrase item
    // -------------------------------------------------------------------------------
    WSCPassphraseItem* internetPassphrase_testCase1 =
        [ [ WSCKeychain login ] addInternetPassphraseWithServerName: @"www.waxsealcore.org"
                                                    URLRelativePath: @"/positive/test/case/1"
                                                        accountName: @"NSTongG"
                                                           protocol: WSCInternetProtocolTypeHTTPS
                                                         passphrase: @"waxsealcore"
                                                              error: &error ];
    XCTAssertFalse( internetPassphrase_testCase1.isInvisible );
    XCTAssertFalse( internetPassphrase_testCase1.isNegative );
    internetPassphrase_testCase1.isInvisible = YES;
    [ internetPassphrase_testCase1 setNegative: YES ];
    XCTAssertTrue( internetPassphrase_testCase1.isInvisible );
    XCTAssertTrue( internetPassphrase_testCase1.isNegative );

    // Search for it
    internetPassphrase_testCase1 = ( WSCPassphraseItem* )[ [ WSCKeychain login ]
        findFirstKeychainItemSatisfyingSearchCriteria: @{ WSCKeychainItemAttributeLabel : @"www.waxsealcore.org"
                                                        , WSCKeychainItemAttributeProtocol : WSCInternetProtocolCocoaValue( WSCInternetProtocolTypeHTTPS )
                                                        , WSCKeychainItemAttributeInvisible : @YES
                                                        , WSCKeychainItemAttributeNegative : @YES
                                                        }
                                            itemClass: WSCKeychainItemClassInternetPassphraseItem
                                                error: &error ];
    XCTAssertNotNil( internetPassphrase_testCase1 );

    [ internetPassphrase_testCase1 setInvisible: NO ];
    [ internetPassphrase_testCase1 setNegative: NO ];

    internetPassphrase_testCase1 = ( WSCPassphraseItem* )[ [ WSCKeychain login ]
        findFirstKeychainItemSatisfyingSearchCriteria: @{ WSCKeychainItemAttributeLabel : @"www.waxsealcore.org"
                                                        , WSCKeychainItemAttributeProtocol : WSCInternetProtocolCocoaValue( WSCInternetProtocolTypeHTTPS )
                                                        , WSCKeychainItemAttributeInvisible : @YES
                                                        , WSCKeychainItemAttributeNegative : @YES
                                                        }
                                            itemClass: WSCKeychainItemClassInternetPassphraseItem
                                                error: &error ];
    XCTAssertNil( internetPassphrase_testCase1 );

    internetPassphrase_testCase1 = ( WSCPassphraseItem* )[ [ WSCKeychain login ]
        findFirstKeychainItemSatisfyingSearchCriteria: @{ WSCKeychainItemAttributeLabel : @"www.waxsealcore.org"
                                                        , WSCKeychainItemAttributeProtocol : WSCInternetProtocolCocoaValue( WSCInternetProtocolTypeHTTPS )
                                                        , WSCKeychainItemAttributeInvisible : @NO
                                                        , WSCKeychainItemAttributeNegative : @NO
                                                        }
                                            itemClass: WSCKeychainItemClassInternetPassphraseItem
                                                error: &error ];
    XCTAssertNotNil( internetPassphrase_testCase1 );

    [ internetPassphrase_testCase1.keychain deleteKeychainItem: internetPassphrase_testCase1 error: nil ];
    }

- ( void ) testUserDefinedDataProperty
    {
    NSError* error = nil;

    // -------------------------------------------------------------------------------
    // Positive Test Case 0: for Application passphrase item
    // -------------------------------------------------------------------------------
    WSCPassphraseItem* applicationPassphrase_testCase0 =
        [ [ WSCKeychain login ] addApplicationPassphraseWithServiceName: @"WaxSealCore Unit Tests"
                                                            accountName: @"NSTongG"
                                                             passphrase: @"waxsealcore"
                                                                  error: &error ];
    XCTAssertNotNil( applicationPassphrase_testCase0 );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    NSData* userDefinedData_testCase0 = nil;

    userDefinedData_testCase0 = [ NSData dataWithContentsOfURL: applicationPassphrase_testCase0.keychain.URL ];
    applicationPassphrase_testCase0.userDefinedData = userDefinedData_testCase0;
    XCTAssertNotNil( applicationPassphrase_testCase0.userDefinedData );
    XCTAssertEqualObjects( userDefinedData_testCase0, applicationPassphrase_testCase0.userDefinedData );

    userDefinedData_testCase0 = [ @"waxsealcore" dataUsingEncoding: NSUTF8StringEncoding ];
    applicationPassphrase_testCase0.userDefinedData = userDefinedData_testCase0;
    XCTAssertNotNil( applicationPassphrase_testCase0.userDefinedData );
    XCTAssertEqualObjects( userDefinedData_testCase0, applicationPassphrase_testCase0.userDefinedData );
    XCTAssertEqualObjects( @"waxsealcore", [ [ [ NSString alloc ] initWithData: applicationPassphrase_testCase0.userDefinedData encoding: NSUTF8StringEncoding ] autorelease ] );

    [ applicationPassphrase_testCase0.keychain deleteKeychainItem: applicationPassphrase_testCase0 error: nil ];
    applicationPassphrase_testCase0.userDefinedData = userDefinedData_testCase0;
    XCTAssertNil( applicationPassphrase_testCase0.userDefinedData );

    // -------------------------------------------------------------------------------
    // Negative Test Case 0: for Internet passphrase item
    // -------------------------------------------------------------------------------
    WSCPassphraseItem* internetPassphrase_negativeTestCase0 =
        [ [ WSCKeychain login ] addInternetPassphraseWithServerName: @"www.waxsealcore.org"
                                                       URLRelativePath: @"negative/test/case/1"
                                                           accountName: @"NSTongG"
                                                              protocol: WSCInternetProtocolTypeHTTPS
                                                            passphrase: @"waxsealcore"
                                                                 error: &error ];
    XCTAssertNotNil( internetPassphrase_negativeTestCase0 );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    NSData* userDefinedData_negativeTestCase0 = nil;

    userDefinedData_negativeTestCase0 = [ NSData dataWithContentsOfURL: internetPassphrase_negativeTestCase0.keychain.URL ];
    internetPassphrase_negativeTestCase0.userDefinedData = userDefinedData_negativeTestCase0;
    XCTAssertNil( internetPassphrase_negativeTestCase0.userDefinedData );

    [ internetPassphrase_negativeTestCase0.keychain deleteKeychainItem: internetPassphrase_negativeTestCase0 error: nil ];
    }

- ( void ) testLabelProperty
    {
    NSError* error = nil;

    WSCKeychain* commonKeychain = _WSCRandomKeychain();
    NSString* commonLabel = @"WaxSealCore Password";

    // -------------------------------------------------------------------------------
    // Positive Test Case 0: for Internet passphrase item
    // -------------------------------------------------------------------------------
    for ( int _Index = 0; _Index < 20; _Index++ )
        {
        @autoreleasepool
            {
            WSCPassphraseItem* internetPasswordItem =
                [ commonKeychain addInternetPassphraseWithServerName: @"node-los.vnet.link"
                                                     URLRelativePath: nil
                                                         accountName: @"NSTongG"
                                                            protocol: WSCInternetProtocolTypeHTTPSProxy
                                                          passphrase: @"waxsealcore"
                                                               error: &error ];
            XCTAssertNotNil( internetPasswordItem );
            XCTAssertNil( error );
            _WSCPrintNSErrorForUnitTest( error );

            NSLog( @"Older Label: %@", internetPasswordItem.label );
            internetPasswordItem.label = commonLabel;
            XCTAssertNotNil( internetPasswordItem.label );
            XCTAssertEqualObjects( internetPasswordItem.label, commonLabel );
            NSLog( @"Newer Label: %@", internetPasswordItem.label );

            [ commonKeychain deleteKeychainItem: internetPasswordItem error: nil ];
            XCTAssertNil( internetPasswordItem.label );
            }
        }

    // -------------------------------------------------------------------------------
    // Positive Test Case 1: for application passphrase item
    // -------------------------------------------------------------------------------
    for ( int _Index = 0; _Index < 20; _Index++ )
        {
        @autoreleasepool
            {
            WSCPassphraseItem* applicationPasswordItem =
                [ commonKeychain addApplicationPassphraseWithServiceName: @"WaxSealCore Unit Tests"
                                                             accountName: @"NSTongG"
                                                              passphrase: @"waxsealcore"
                                                                   error: &error ];
            XCTAssertNotNil( applicationPasswordItem );
            XCTAssertNil( error );
            _WSCPrintNSErrorForUnitTest( error );

            NSLog( @"Older Label: %@", applicationPasswordItem.label );
            applicationPasswordItem.label = commonLabel;
            XCTAssertNotNil( applicationPasswordItem.label );
            XCTAssertEqualObjects( applicationPasswordItem.label, commonLabel );
            NSLog( @"Newer Label: %@", applicationPasswordItem.label );

            [ applicationPasswordItem.keychain deleteKeychainItem: applicationPasswordItem error: nil ];

            XCTAssertNil( applicationPasswordItem.label );
            }
        }
    }

- ( void ) testIsValidProperty
    {
    NSError* error = nil;
    OSStatus resultCode = errSecSuccess;

    // ============================================================================================================ //
    // Positive Test Case 0: for Internet passphrase item
    WSCPassphraseItem* internetPassphraseItem_testCase0 = _WSC_www_waxsealcore_org_InternetKeychainItem( &error );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    XCTAssertTrue( internetPassphraseItem_testCase0.isValid );

    // Negative Test Case 0: for Internet passphrase item
    resultCode = SecKeychainItemDelete( internetPassphraseItem_testCase0.secKeychainItem );
    XCTAssertEqual( resultCode, errSecSuccess );

    XCTAssertFalse( internetPassphraseItem_testCase0.isValid );

    // ============================================================================================================ //
    // Positive Test Case 1: for application passphrase item
    WSCPassphraseItem* applicationPassphraseItem_testCase1 = _WSC_WaxSealCoreTests_ApplicationKeychainItem( &error );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    XCTAssertTrue( applicationPassphraseItem_testCase1.isValid );

    // Negative Test Case 1: for application passphrase item
    resultCode = SecKeychainItemDelete( applicationPassphraseItem_testCase1.secKeychainItem );
    XCTAssertEqual( resultCode, errSecSuccess );

    XCTAssertFalse( applicationPassphraseItem_testCase1.isValid );

    // ============================================================================================================ //
    // Positive Test Case 2: for application passphrase item
    WSCKeychain* randomKeychain_testCase2 = _WSCRandomKeychain();
    WSCPassphraseItem* applicationPassphraseItem_testCase2 =
        [ randomKeychain_testCase2 addApplicationPassphraseWithServiceName: @"Oh My WaxSealCore!"
                                                               accountName: @"NSTongG"
                                                                passphrase: @"waxsealcore"
                                                                     error: &error ];
    XCTAssertNotNil( applicationPassphraseItem_testCase2 );
    XCTAssertTrue( applicationPassphraseItem_testCase2.isValid );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    // Negative Test Case 2: for application passphrase item
    [ [ WSCKeychainManager defaultManager ] deleteKeychain: randomKeychain_testCase2 error: &error ];
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    XCTAssertFalse( applicationPassphraseItem_testCase2.isValid );

    // ============================================================================================================ //
    // Positive Test Case 3: for Internet passphrase item
    WSCKeychain* randomKeychain_testCase3 = _WSCRandomKeychain();
    WSCPassphraseItem* internetPassphraseItem_testCase3 =
        [ randomKeychain_testCase3 addInternetPassphraseWithServerName: @"ohmywaxsealcore.me"
                                                       URLRelativePath: @"testisvalidproperty/negative/testcase/3"
                                                           accountName: @"NSTongG"
                                                              protocol: WSCInternetProtocolTypeHTTPS
                                                            passphrase: @"waxsealcore"
                                                                 error: &error ];
    internetPassphraseItem_testCase3.port = 3234;
    internetPassphraseItem_testCase3.comment = @"Core of WaxSeal, a modern and full feature Objective-C wrapper"
                                                "for Keychain Services, Certificate, Key, and Trust Services API.";
    internetPassphraseItem_testCase3.kindDescription = @"WaxSealCore Account Passphrase";
    XCTAssertNotNil( internetPassphraseItem_testCase3 );
    XCTAssertTrue( internetPassphraseItem_testCase3.isValid );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    // Negative Test Case 3: for Internet passphrase item
    [ [ WSCKeychainManager defaultManager ] deleteKeychain: randomKeychain_testCase3 error: &error ];
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    XCTAssertFalse( internetPassphraseItem_testCase3.isValid );

    // ============================================================================================================ //
    // Positive Test Case 4: for Internet passphrase item
    WSCKeychain* randomKeychain_testCase4 = _WSCRandomKeychain();
    WSCPassphraseItem* samePassphraseItem0_testCase4 =
        [ randomKeychain_testCase4 addInternetPassphraseWithServerName: @"omywaxsealcore.me"
                                                       URLRelativePath: @"testisvalidproperty/negative/testcase/same/4"
                                                           accountName: @"NSTongG"
                                                              protocol: WSCInternetProtocolTypeHTTP
                                                            passphrase: @"waxsealcore0"
                                                                 error: &error ];
    XCTAssertNotNil( samePassphraseItem0_testCase4 );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    WSCPassphraseItem* samePassphraseItem1_testCase4 =
        [ randomKeychain_testCase4 addInternetPassphraseWithServerName: @"omywaxsealcore.me"
                                                       URLRelativePath: @"testisvalidproperty/negative/testcase/same/4"
                                                           accountName: @"NSTongG"
                                                              protocol: WSCInternetProtocolTypeHTTPS
                                                            passphrase: @"waxsealcore1"
                                                                 error: &error ];
    samePassphraseItem0_testCase4.protocol = WSCInternetProtocolTypeHTTP;
    XCTAssertNotNil( samePassphraseItem1_testCase4 );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    XCTAssertTrue( samePassphraseItem0_testCase4.isValid );
    XCTAssertTrue( samePassphraseItem1_testCase4.isValid );

    // Negative Test Case 4: for Internet passphrase item
    SecKeychainItemDelete( samePassphraseItem0_testCase4.secKeychainItem );
    SecKeychainItemDelete( samePassphraseItem1_testCase4.secKeychainItem );

    XCTAssertFalse( samePassphraseItem0_testCase4.isValid );
    XCTAssertFalse( samePassphraseItem1_testCase4.isValid );
    }

- ( void ) testKeychainProperty
    {
    NSError* error = nil;

    // -------------------------------------------------------------------------------
    // Positive Test Case 0: for Internet passphrase item
    // -------------------------------------------------------------------------------
    for ( int _Index = 0; _Index < 20; _Index++ )
        {
        WSCKeychain* hostKeychain = _WSCRandomKeychain();

        WSCPassphraseItem* passphraseItem =
            [ hostKeychain addInternetPassphraseWithServerName: @"waxsealcore.io"
                                               URLRelativePath: [ NSString stringWithFormat: @"/testcase/0/loop%d", _Index ]
                                                   accountName: @"NSTongG"
                                                      protocol: WSCInternetProtocolTypeHTTPS
                                                    passphrase: @"waxsealcore"
                                                         error: &error ];
        XCTAssertNotNil( passphraseItem );
        XCTAssertTrue( passphraseItem.isValid );
        XCTAssertNil( error );
        _WSCPrintNSErrorForUnitTest( error );

        WSCKeychain* theKeychainResidingIn = [ passphraseItem keychain ];
        XCTAssertNotNil( theKeychainResidingIn );
        XCTAssertEqualObjects( theKeychainResidingIn, hostKeychain );
        XCTAssertEqual( theKeychainResidingIn.hash, hostKeychain.hash );
        XCTAssertEqualObjects( theKeychainResidingIn.URL, hostKeychain.URL );

        [ [ WSCKeychainManager defaultManager ] deleteKeychain: hostKeychain error: &error ];
        XCTAssertNil( error );
        _WSCPrintNSErrorForUnitTest( error );

        theKeychainResidingIn = [ passphraseItem keychain ];
        XCTAssertNil( theKeychainResidingIn );
        XCTAssertNotEqualObjects( theKeychainResidingIn, hostKeychain );
        }

    // -------------------------------------------------------------------------------
    // Positive Test Case 1: for application passphrase item
    // -------------------------------------------------------------------------------
    for ( int _Index = 0; _Index < 20; _Index++ )
        {
        WSCKeychain* hostKeychain = _WSCRandomKeychain();

        WSCPassphraseItem* passphraseItem =
            [ hostKeychain addApplicationPassphraseWithServiceName: @"WaxSealCore Unit Test"
                                                       accountName: @"NSTongG"
                                                        passphrase: @"waxsealcore"
                                                             error: &error ];
        XCTAssertNotNil( passphraseItem );
        XCTAssertTrue( passphraseItem.isValid );
        XCTAssertNil( error );
        _WSCPrintNSErrorForUnitTest( error );

        WSCKeychain* theKeychainResidingIn = [ passphraseItem keychain ];
        XCTAssertNotNil( theKeychainResidingIn );
        XCTAssertEqualObjects( theKeychainResidingIn, hostKeychain );
        XCTAssertEqual( theKeychainResidingIn.hash, hostKeychain.hash );
        XCTAssertEqualObjects( theKeychainResidingIn.URL, hostKeychain.URL );

        SecKeychainItemDelete( passphraseItem.secKeychainItem );
        XCTAssertNil( error );
        _WSCPrintNSErrorForUnitTest( error );

        theKeychainResidingIn = [ passphraseItem keychain ];
        XCTAssertNil( theKeychainResidingIn );
        XCTAssertNotEqualObjects( theKeychainResidingIn, hostKeychain );
        }
    }

- ( void ) testPassphraseProperty
    {
    NSError* error = nil;
    size_t size = sizeof( _WSCPassphrases ) / sizeof( _WSCPassphrases[ 0 ] );

    WSCPassphraseItem* internetPassphraseItem = _WSC_www_waxsealcore_org_InternetKeychainItem( &error );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    WSCPassphraseItem* applicationPassphraseItem = _WSC_WaxSealCoreTests_ApplicationKeychainItem( &error );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );

    // -------------------------------------------------------------------------------
    // Positive Test Case 0: for Internet passphrase item
    // -------------------------------------------------------------------------------
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        @autoreleasepool
            {
            internetPassphraseItem.passphrase = [ _WSCPassphrases[ _Index ] dataUsingEncoding: NSUTF8StringEncoding ];

            NSData* passphraseData = [ internetPassphraseItem passphrase ];
            NSString* passphraseString = [ [ [ NSString alloc ] initWithData: passphraseData encoding: NSUTF8StringEncoding ] autorelease ];
            XCTAssertNotNil( internetPassphraseItem.passphrase );
            XCTAssertNotNil( passphraseData );
            XCTAssertNotNil( passphraseString );
            XCTAssertEqual( _WSCPassphrases[ _Index ].length, passphraseData.length );
            XCTAssertEqual( passphraseData.length, passphraseString.length );
            XCTAssertEqual( passphraseString.length, _WSCPassphrases[ _Index ].length );
            XCTAssertEqualObjects( passphraseString, _WSCPassphrases[ _Index ] );
            }
        }

    // -------------------------------------------------------------------------------
    // Positive Test Case 1: for application passphrase item
    // -------------------------------------------------------------------------------
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        @autoreleasepool
            {
            applicationPassphraseItem.passphrase = [ _WSCPassphrases[ _Index ] dataUsingEncoding: NSUTF8StringEncoding ];

            NSData* passphraseData = [ applicationPassphraseItem passphrase ];
            NSString* passphraseString = [ [ [ NSString alloc ] initWithData: passphraseData encoding: NSUTF8StringEncoding ] autorelease ];
            XCTAssertNotNil( applicationPassphraseItem.passphrase );
            XCTAssertNotNil( passphraseData );
            XCTAssertNotNil( passphraseString );
            XCTAssertEqual( _WSCPassphrases[ _Index ].length, passphraseData.length );
            XCTAssertEqual( passphraseData.length, passphraseString.length );
            XCTAssertEqual( passphraseString.length, _WSCPassphrases[ _Index ].length );
            XCTAssertEqualObjects( passphraseString, _WSCPassphrases[ _Index ] );
            }
        }

    SecKeychainItemDelete( internetPassphraseItem.secKeychainItem );
    SecKeychainItemDelete( applicationPassphraseItem.secKeychainItem );
#if 1
    // -------------------------------------------------------------------------------
    // Negaytive Test Case 0: the Internet passphrase is already invalid
    // -------------------------------------------------------------------------------
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        @autoreleasepool
            {
            internetPassphraseItem.passphrase = [ _WSCPassphrases[ _Index ] dataUsingEncoding: NSUTF8StringEncoding ];

            NSData* passphraseData = [ internetPassphraseItem passphrase ];
            NSString* passphraseString = [ [ [ NSString alloc ] initWithData: passphraseData encoding: NSUTF8StringEncoding ] autorelease ];
            XCTAssertNil( applicationPassphraseItem.passphrase );
            XCTAssertNil( passphraseData );
            XCTAssertEqual( passphraseString.length, 0 );
            XCTAssertNotEqual( _WSCPassphrases[ _Index ].length, 0 );
            XCTAssertNotEqual( passphraseString.length, _WSCPassphrases[ _Index ].length );
            XCTAssertNotEqualObjects( passphraseString, _WSCPassphrases[ _Index ] );
            }
        }
#endif
    }

- ( void ) testHostNameProperty
    {
    NSError* error = nil;
    size_t size = sizeof( _WSCHostsForPositiveTests ) / sizeof( _WSCHostsForPositiveTests[ 0 ] );

    // -------------------------------------------------------------------------------
    // Positive Test Case 0
    // -------------------------------------------------------------------------------
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        @autoreleasepool
            {
            WSCPassphraseItem* internetPassphraseItem = _WSC_www_waxsealcore_org_InternetKeychainItem( &error );
            XCTAssertNil( error );
            _WSCPrintNSErrorForUnitTest( error );

            internetPassphraseItem.hostName = _WSCHostsForPositiveTests[ _Index ];

            XCTAssertNotNil( internetPassphraseItem.hostName );
            XCTAssertEqualObjects( internetPassphraseItem.hostName, _WSCHostsForPositiveTests[ _Index ] );

            SecKeychainItemDelete( internetPassphraseItem.secKeychainItem );
            }
        }

    // -------------------------------------------------------------------------------
    // Positive Test Case 1
    // -------------------------------------------------------------------------------
    NSArray* extraPunctuations = @[ @"...,,", @".,13//", @"\\//", @":'\"", @"`!@#$%^&*()" ];
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        @autoreleasepool
            {
            WSCPassphraseItem* internetPassphraseItem = _WSC_www_waxsealcore_org_InternetKeychainItem( &error );
            XCTAssertNil( error );
            _WSCPrintNSErrorForUnitTest( error );

            for ( NSString* extraPunctuation in extraPunctuations )
                {
                NSString* strangeHost = [ _WSCHostsForPositiveTests[ _Index ] stringByAppendingString: extraPunctuation ];

                internetPassphraseItem.hostName = strangeHost;

                XCTAssertNotNil( internetPassphraseItem.hostName );
                XCTAssertEqualObjects( internetPassphraseItem.hostName, strangeHost );
                }

            SecKeychainItemDelete( internetPassphraseItem.secKeychainItem );
            }
        }

    // -------------------------------------------------------------------------------
    // Negative Test Case 0
    // -------------------------------------------------------------------------------
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        @autoreleasepool
            {
            WSCPassphraseItem* applicationPassphraseItem = _WSC_WaxSealCoreTests_ApplicationKeychainItem( &error );
            XCTAssertNil( error );
            _WSCPrintNSErrorForUnitTest( error );

            applicationPassphraseItem.hostName = _WSCHostsForPositiveTests[ _Index ];
            XCTAssertNil( applicationPassphraseItem.hostName );
            XCTAssertNotEqualObjects( applicationPassphraseItem.hostName, _WSCHostsForPositiveTests[ _Index ] );

            SecKeychainItemDelete( applicationPassphraseItem.secKeychainItem );
            }
        }
    }

- ( void ) testProtocolProperty
    {
    NSError* error = nil;
    size_t size = sizeof( _WSCProtocols ) / sizeof( _WSCProtocols[ 0 ] );

    WSCPassphraseItem* internetPassphraseItem = _WSC_www_waxsealcore_org_InternetKeychainItem( &error );
    NSString* schemeString = nil;

    // -------------------------------------------------------------------------------
    // Positive Test Case 0
    // -------------------------------------------------------------------------------
    internetPassphraseItem.protocol = WSCInternetProtocolTypeHTTPS;
    schemeString = [ internetPassphraseItem.URL scheme ];
    NSLog( @"Scheme String: %@", schemeString );

    XCTAssertEqual( internetPassphraseItem.protocol, WSCInternetProtocolTypeHTTPS );
    XCTAssertEqualObjects( _WSCSchemeStringForProtocol( internetPassphraseItem.protocol )
                         , _WSCSchemeStringForProtocol( WSCInternetProtocolTypeHTTPS ) );
    XCTAssertEqualObjects( _WSCSchemeStringForProtocol( internetPassphraseItem.protocol ), schemeString );

    // -------------------------------------------------------------------------------
    // Positive Test Case 1
    // -------------------------------------------------------------------------------
    internetPassphraseItem.protocol = WSCInternetProtocolTypeHTTPSProxy;
    schemeString = [ internetPassphraseItem.URL scheme ];
    NSLog( @"Scheme String: %@", schemeString );

    XCTAssertEqual( internetPassphraseItem.protocol, WSCInternetProtocolTypeHTTPSProxy );
    XCTAssertEqualObjects( _WSCSchemeStringForProtocol( internetPassphraseItem.protocol )
                         , _WSCSchemeStringForProtocol( WSCInternetProtocolTypeHTTPSProxy ) );
    XCTAssertEqualObjects( _WSCSchemeStringForProtocol( internetPassphraseItem.protocol ), schemeString );

    // -------------------------------------------------------------------------------
    // Positive Test Case 2
    // -------------------------------------------------------------------------------
    internetPassphraseItem.protocol = WSCInternetProtocolTypeHTTP;
    schemeString = [ internetPassphraseItem.URL scheme ];
    NSLog( @"Scheme String: %@", schemeString );

    XCTAssertEqual( internetPassphraseItem.protocol, WSCInternetProtocolTypeHTTP );
    XCTAssertEqualObjects( _WSCSchemeStringForProtocol( internetPassphraseItem.protocol )
                         , _WSCSchemeStringForProtocol( WSCInternetProtocolTypeHTTP ) );
    XCTAssertEqualObjects( _WSCSchemeStringForProtocol( internetPassphraseItem.protocol ), schemeString );

    [ internetPassphraseItem.keychain deleteKeychainItem: internetPassphraseItem error: nil ];

    // -------------------------------------------------------------------------------
    // Negative Test Case 0
    // -------------------------------------------------------------------------------
    for ( size_t _Index = 0; _Index < size; _Index++ )
        {
        NSLog( @"Loop #1: %lu", _Index );
        @autoreleasepool
            {
            WSCPassphraseItem* applicationPassphraseItem = _WSC_WaxSealCoreTests_ApplicationKeychainItem( &error );
            XCTAssertNil( error );
            _WSCPrintNSErrorForUnitTest( error );

            applicationPassphraseItem.protocol = _WSCProtocols[ _Index ];

            NSString* schemeString = [ applicationPassphraseItem.URL scheme ];
            NSLog( @"Scheme String #%lu: %@", _Index, schemeString );

            XCTAssertEqual( applicationPassphraseItem.protocol, 0 );

            XCTAssertNil( _WSCSchemeStringForProtocol( applicationPassphraseItem.protocol ) );
            XCTAssertNil( schemeString );

            SecKeychainItemDelete( applicationPassphraseItem.secKeychainItem );
            }
        }
    }

- ( void ) testProperties
    {
    NSError* error = nil;
    WSCKeychain* commonRandomKeychain = _WSCRandomKeychain();

    NSString* commentOne = @"A keychain is an encrypted container that holds passphrases for multiple applications and secure services."
                            "Keychains are secure storage containers, which means that when the keychain is locked, no one can access "
                            "its protected contents. In OS X, users can unlock a keychain－thus providing trusted applications access to "
                            "the contents－by entering a single master passphrase."
                            "The above encrypted container which is called “keychain” is represented by WSCKeychain object in WaxSealCore "
                            "framework and SecKeychainRef in Keychain Services API.";

    NSString* commentTwo = @"Goodbye, WaxSealCore!";

    NSString* accountOne = @"NSTongG";
    NSString* accountTwo = @"Tong G.";

    NSString* kindDescriptionOne = @"WaxSealCore Passphrase";
    NSString* kindDescriptionTwo = @"Passphrase for WaxSealCore";

    NSString* serviceNameOne = @"My Precious Framework";
    NSString* serviceNameTwo = @"😲";

    NSString* hostNameOne = @"www.waxsealcore.org";
    NSString* hostNameTwo = @"twitter.com";

    NSString* relativeURLPathOne = @"/wsckeychainItemTests/m/1";
    NSString* relativeURLPathTwo = @"NSTongG";

    WSCInternetAuthenticationType authTypeOne = WSCInternetAuthenticationTypeHTMLForm;
    WSCInternetAuthenticationType authTypeTwo = WSCInternetAuthenticationTypeMSN;
    WSCInternetAuthenticationType authTypeThree = WSCInternetAuthenticationTypeHTTPDigest;

    WSCInternetProtocolType protocolTypeOne = WSCInternetProtocolTypeHTTPS;
    WSCInternetProtocolType protocolTypeTwo = WSCInternetProtocolTypeHTTP;
    WSCInternetProtocolType protocolTypeThree = WSCInternetProtocolTypeFTP;

    NSUInteger portOne = 544;
    NSUInteger portTwo = 321;
    NSUInteger portThree = 0;

    // -------------------------------------------------------------------------------------------------------------------- //
    // Test Case 0
    // -------------------------------------------------------------------------------------------------------------------- //
    WSCPassphraseItem* applicationPassphrase_testCase0 =
        [ commonRandomKeychain addApplicationPassphraseWithServiceName: @"WaxSealCore: testSetCreationDate"
                                                           accountName: @"testSetCreationDate Test Case 0"
                                                            passphrase: @"waxsealcore"
                                                                 error: &error ];
    #pragma mark Comment
    [ applicationPassphrase_testCase0 setComment: commentOne ];
    XCTAssertNotNil( applicationPassphrase_testCase0.comment );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.comment, commentOne );

     /*******/ NSLog( @"Comment #0 (Test Case 0): %@", applicationPassphrase_testCase0.comment ); /*******/

    [ applicationPassphrase_testCase0 setComment: commentTwo ];
    XCTAssertNotNil( applicationPassphrase_testCase0.comment );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.comment, commentTwo );

    /*******/ NSLog( @"Comment #1 (Test Case 0): %@", applicationPassphrase_testCase0.comment ); /*******/

    #pragma mark Account
    [ applicationPassphrase_testCase0 setAccount: accountOne ];
    XCTAssertNotNil( applicationPassphrase_testCase0.account );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.account, accountOne );

    /*******/ NSLog( @"Account #0 (Test Case 0): %@", applicationPassphrase_testCase0.account ); /*******/

    [ applicationPassphrase_testCase0 setAccount: accountTwo ];
    XCTAssertNotNil( applicationPassphrase_testCase0.account );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.account, accountTwo );

    /*******/ NSLog( @"Account #1 (Test Case 0): %@", applicationPassphrase_testCase0.account ); /*******/

    #pragma mark Kind Description
    [ applicationPassphrase_testCase0 setKindDescription: kindDescriptionOne ];
    XCTAssertNotNil( applicationPassphrase_testCase0.kindDescription );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.kindDescription, kindDescriptionOne );

    /*******/ NSLog( @"Kind Description #0 (Test Case 0): %@", applicationPassphrase_testCase0.kindDescription ); /*******/

    [ applicationPassphrase_testCase0 setKindDescription: kindDescriptionTwo ];
    XCTAssertNotNil( applicationPassphrase_testCase0.kindDescription );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.kindDescription, kindDescriptionTwo );

    /*******/ NSLog( @"Kind Description #1 (Test Case 0): %@", applicationPassphrase_testCase0.kindDescription ); /*******/

    #pragma mark Service Name
    [ applicationPassphrase_testCase0 setServiceName: serviceNameOne ];
    XCTAssertNotNil( applicationPassphrase_testCase0.serviceName );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.serviceName, serviceNameOne );

    /*******/ NSLog( @"Service Name #0 (Test Case 0): %@", applicationPassphrase_testCase0.serviceName ); /*******/

    [ applicationPassphrase_testCase0 setServiceName: serviceNameTwo ];
    XCTAssertNotNil( applicationPassphrase_testCase0.serviceName );
    XCTAssertEqualObjects( applicationPassphrase_testCase0.serviceName, serviceNameTwo );

    /*******/ NSLog( @"Service Name #1 (Test Case 0): %@", applicationPassphrase_testCase0.serviceName ); /*******/

    #pragma mark Server Name
    [ applicationPassphrase_testCase0 setHostName: hostNameOne ];
    XCTAssertNil( applicationPassphrase_testCase0.hostName );
    XCTAssertNotEqualObjects( applicationPassphrase_testCase0.hostName, hostNameOne );

    /*******/ NSLog( @"Server Name #0 (Test Case 0): %@", applicationPassphrase_testCase0.hostName ); /*******/

    [ applicationPassphrase_testCase0 setHostName: hostNameTwo ];
    XCTAssertNil( applicationPassphrase_testCase0.hostName );
    XCTAssertNotEqualObjects( applicationPassphrase_testCase0.hostName, hostNameTwo );

    /*******/ NSLog( @"Server Name #1 (Test Case 0): %@", applicationPassphrase_testCase0.hostName ); /*******/

    #pragma mark Relative URL Path
    [ applicationPassphrase_testCase0 setRelativePath: relativeURLPathOne ];
    XCTAssertNil( applicationPassphrase_testCase0.relativePath );
    XCTAssertNotEqualObjects( applicationPassphrase_testCase0.relativePath, relativeURLPathOne );

    /*******/ NSLog( @"Relative Path #0 (Test Case 0): %@", applicationPassphrase_testCase0.relativePath ); /*******/

    [ applicationPassphrase_testCase0 setRelativePath: relativeURLPathTwo ];
    XCTAssertNil( applicationPassphrase_testCase0.relativePath );
    XCTAssertNotEqualObjects( applicationPassphrase_testCase0.relativePath, relativeURLPathTwo );

    /*******/ NSLog( @"Relative Path #1 (Test Case 0): %@", applicationPassphrase_testCase0.relativePath ); /*******/

    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( applicationPassphrase_testCase0.secKeychainItem );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Test Case 1
    // -------------------------------------------------------------------------------------------------------------------- //
    WSCPassphraseItem* internetPassphrase_testCase1 =
        [ commonRandomKeychain addInternetPassphraseWithServerName: @"www.waxsealcore.org"
                                                   URLRelativePath: @"testSetCreationDate/test/case/0"
                                                       accountName: @"waxsealcore"
                                                          protocol: WSCInternetProtocolTypeHTTPS
                                                        passphrase: @"waxsealcore"
                                                             error: &error ];
    internetPassphrase_testCase1.serviceName = @"WaxSealCore Test";
    internetPassphrase_testCase1.port = 324;
    NSLog( @"Fucking URL #1: %@", internetPassphrase_testCase1.URL );

    [ internetPassphrase_testCase1 setProtocol: WSCInternetProtocolTypeSSH ];
    [ internetPassphrase_testCase1 setHostName: @"www.facebook.com" ];
    [ internetPassphrase_testCase1 setRelativePath: @"//fucking/TongGuo" ];
    internetPassphrase_testCase1.port = 2194;
    NSLog( @"Fucking Host: %@", internetPassphrase_testCase1.hostName );
    NSLog( @"Fucking Port: %lu", internetPassphrase_testCase1.port );
    NSLog( @"Fucking Path: %@", internetPassphrase_testCase1.relativePath );
    NSLog( @"Fucking URL #2: %@", internetPassphrase_testCase1.URL );
    NSLog( @"Fucking Protocol: %@", _WSCSchemeStringForProtocol( internetPassphrase_testCase1.protocol ) );
    #pragma mark Comment
    [ internetPassphrase_testCase1 setComment: commentOne ];
    XCTAssertNotNil( internetPassphrase_testCase1.comment );
    XCTAssertEqualObjects( internetPassphrase_testCase1.comment, commentOne );

    /*******/ NSLog( @"Comment #0 (Test Case 1): %@", internetPassphrase_testCase1.comment ); /*******/

    [ internetPassphrase_testCase1 setComment: commentTwo ];
    XCTAssertNotNil( internetPassphrase_testCase1.comment );
    XCTAssertEqualObjects( internetPassphrase_testCase1.comment, commentTwo );

    /*******/ NSLog( @"Comment #1 (Test Case 1): %@", internetPassphrase_testCase1.comment ); /*******/

    #pragma mark Account
    [ internetPassphrase_testCase1 setAccount: accountOne ];
    XCTAssertNotNil( internetPassphrase_testCase1.account );
    XCTAssertEqualObjects( internetPassphrase_testCase1.account, accountOne );

    /*******/ NSLog( @"Account #0 (Test Case 1): %@", internetPassphrase_testCase1.account ); /*******/

    [ internetPassphrase_testCase1 setAccount: accountTwo ];
    XCTAssertNotNil( internetPassphrase_testCase1.account );
    XCTAssertEqualObjects( internetPassphrase_testCase1.account, accountTwo );

    /*******/ NSLog( @"Account #1 (Test Case 1): %@", internetPassphrase_testCase1.account ); /*******/

    #pragma mark Kind Description
    [ internetPassphrase_testCase1 setKindDescription: kindDescriptionOne ];
    XCTAssertNotNil( internetPassphrase_testCase1.kindDescription );
    XCTAssertEqualObjects( internetPassphrase_testCase1.kindDescription, kindDescriptionOne );

    /*******/ NSLog( @"Kind Description #0 (Test Case 1): %@", internetPassphrase_testCase1.kindDescription ); /*******/

    [ internetPassphrase_testCase1 setKindDescription: kindDescriptionTwo ];
    XCTAssertNotNil( internetPassphrase_testCase1.kindDescription );
    XCTAssertEqualObjects( internetPassphrase_testCase1.kindDescription, kindDescriptionTwo );

    /*******/ NSLog( @"Kind Description #1 (Test Case 1): %@", internetPassphrase_testCase1.kindDescription ); /*******/

    #pragma mark Service Name
    [ internetPassphrase_testCase1 setServiceName: serviceNameOne ];
    XCTAssertNil( internetPassphrase_testCase1.serviceName );
    XCTAssertNotEqualObjects( internetPassphrase_testCase1.serviceName, serviceNameOne );

    /*******/ NSLog( @"Service Name #0 (Test Case 1): %@", internetPassphrase_testCase1.serviceName ); /*******/

    [ internetPassphrase_testCase1 setServiceName: serviceNameTwo ];
    XCTAssertNil( internetPassphrase_testCase1.serviceName );
    XCTAssertNotEqualObjects( internetPassphrase_testCase1.serviceName, serviceNameTwo );

    /*******/ NSLog( @"Service Name #1 (Test Case 1): %@", internetPassphrase_testCase1.serviceName ); /*******/

    #pragma mark Server Name
    [ internetPassphrase_testCase1 setHostName: hostNameOne ];
    XCTAssertNotNil( internetPassphrase_testCase1.hostName );
    XCTAssertEqualObjects( internetPassphrase_testCase1.hostName, hostNameOne );

    /*******/ NSLog( @"Server Name #0 (Test Case 1): %@", internetPassphrase_testCase1.hostName ); /*******/

    [ internetPassphrase_testCase1 setHostName: hostNameTwo ];
    XCTAssertNotNil( internetPassphrase_testCase1.hostName );
    XCTAssertEqualObjects( internetPassphrase_testCase1.hostName, hostNameTwo );

    /*******/ NSLog( @"Server Name #1 (Test Case 1): %@", internetPassphrase_testCase1.hostName ); /*******/

    #pragma mark Relative URL Path
    [ internetPassphrase_testCase1 setRelativePath: relativeURLPathOne ];
    XCTAssertNotNil( internetPassphrase_testCase1.relativePath );
    XCTAssertEqualObjects( internetPassphrase_testCase1.relativePath, relativeURLPathOne );

    /*******/ NSLog( @"Relative Path #0 (Test Case 1): %@", internetPassphrase_testCase1.relativePath ); /*******/

    [ internetPassphrase_testCase1 setRelativePath: relativeURLPathTwo ];
    XCTAssertNotNil( internetPassphrase_testCase1.relativePath );
    XCTAssertEqualObjects( internetPassphrase_testCase1.relativePath, relativeURLPathTwo );

    /*******/ NSLog( @"Relative Path #1 (Test Case 1): %@", internetPassphrase_testCase1.relativePath ); /*******/

    #pragma mark Auth Type
    [ internetPassphrase_testCase1 setAuthenticationType: authTypeOne ];
    XCTAssertNotEqual( internetPassphrase_testCase1.authenticationType, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, authTypeOne );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, WSCInternetAuthenticationTypeHTMLForm );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, kSecAuthenticationTypeHTMLForm );

    /*******/ NSLog( @"Auth Type #0 (Test Case 1): %@", _WSCFourCharCode2NSString( internetPassphrase_testCase1.authenticationType ) ); /*******/

    [ internetPassphrase_testCase1 setAuthenticationType: authTypeTwo ];
    XCTAssertNotEqual( internetPassphrase_testCase1.authenticationType, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, authTypeTwo );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, WSCInternetAuthenticationTypeMSN );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, kSecAuthenticationTypeMSN );

    /*******/ NSLog( @"Auth Type #1 (Test Case 1): %@", _WSCFourCharCode2NSString( internetPassphrase_testCase1.authenticationType ) ); /*******/

    [ internetPassphrase_testCase1 setAuthenticationType: authTypeThree ];
    XCTAssertNotEqual( internetPassphrase_testCase1.authenticationType, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, authTypeThree );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, WSCInternetAuthenticationTypeHTTPDigest );
    XCTAssertEqual( internetPassphrase_testCase1.authenticationType, kSecAuthenticationTypeHTTPDigest );

    /*******/ NSLog( @"Auth Type #2 (Test Case 1): %@", _WSCFourCharCode2NSString( internetPassphrase_testCase1.authenticationType ) ); /*******/

    #pragma mark Protocol Type
    [ internetPassphrase_testCase1 setProtocol: protocolTypeOne ];
    XCTAssertNotEqual( internetPassphrase_testCase1.protocol, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, protocolTypeOne );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, WSCInternetProtocolTypeHTTPS );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, kSecProtocolTypeHTTPS );

    /*******/ NSLog( @"Protocol Type #0 (Test Case 1): %@", _WSCFourCharCode2NSString( internetPassphrase_testCase1.protocol ) ); /*******/

    [ internetPassphrase_testCase1 setProtocol: protocolTypeTwo ];
    XCTAssertNotEqual( internetPassphrase_testCase1.protocol, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, protocolTypeTwo );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, WSCInternetProtocolTypeHTTP );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, kSecProtocolTypeHTTP );

    /*******/ NSLog( @"Protocol Type #1 (Test Case 1): %@", _WSCFourCharCode2NSString( internetPassphrase_testCase1.protocol ) ); /*******/

    [ internetPassphrase_testCase1 setProtocol: protocolTypeThree ];
    XCTAssertNotEqual( internetPassphrase_testCase1.protocol, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, protocolTypeThree );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, WSCInternetProtocolTypeFTP );
    XCTAssertEqual( internetPassphrase_testCase1.protocol, kSecProtocolTypeFTP );

    /*******/ NSLog( @"Protocol Type #2 (Test Case 1): %@", _WSCFourCharCode2NSString( internetPassphrase_testCase1.protocol ) ); /*******/

    #pragma mark Port Number
    [ internetPassphrase_testCase1 setPort: portOne ];
    XCTAssertNotEqual( internetPassphrase_testCase1.port, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.port, portOne );

    /*******/ NSLog( @"Port Number #0 (Test Case 1): %lu", internetPassphrase_testCase1.port ); /*******/

    [ internetPassphrase_testCase1 setPort: portTwo ];
    XCTAssertNotEqual( internetPassphrase_testCase1.port, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.port, portTwo );

    /*******/ NSLog( @"Port Number #1 (Test Case 1): %lu", internetPassphrase_testCase1.port ); /*******/

    [ internetPassphrase_testCase1 setPort: portThree ];
    XCTAssertEqual( internetPassphrase_testCase1.port, 0 );
    XCTAssertEqual( internetPassphrase_testCase1.port, portThree );

    /*******/ NSLog( @"Port Number #2 (Test Case 1): %lu", internetPassphrase_testCase1.port ); /*******/

    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( internetPassphrase_testCase1.secKeychainItem );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 1: The keychain item: internetPassphrase_testCase1 has been already deleted
    // -------------------------------------------------------------------------------------------------------------------- //
    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( applicationPassphrase_testCase0.secKeychainItem );

    // TODO: XCTAssertFalse( applicationPassphrase_testCase0.isValid );
    XCTAssertNil( applicationPassphrase_testCase0.comment );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 2: The keychain: randomKeychain has been already deleted
    // -------------------------------------------------------------------------------------------------------------------- //
    [ [ WSCKeychainManager defaultManager ] deleteKeychain: commonRandomKeychain
                                                     error: nil ];

    XCTAssertFalse( internetPassphrase_testCase1.isValid );
    XCTAssertNil( internetPassphrase_testCase1.comment );
    }

#define WSCAssertDateEqual( _LhsDate, _RhsDate )\
    {\
    NSDateComponents* _LhsDateComponents =\
        [ [ NSCalendar currentCalendar ] components: NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit\
                                           fromDate: _LhsDate ];\
    NSDateComponents* _RhsDateComponents =\
        [ [ NSCalendar currentCalendar ] components: NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit | NSHourCalendarUnit | NSMinuteCalendarUnit | NSSecondCalendarUnit\
                                           fromDate: _RhsDate ];\
    XCTAssertEqual( _LhsDateComponents.year,    _RhsDateComponents.year   );\
    XCTAssertEqual( _LhsDateComponents.month,   _RhsDateComponents.month  );\
    XCTAssertEqual( _LhsDateComponents.day,     _RhsDateComponents.day    );\
    XCTAssertEqual( _LhsDateComponents.hour,    _RhsDateComponents.hour   );\
    XCTAssertEqual( _LhsDateComponents.minute,  _RhsDateComponents.minute );\
    XCTAssertEqual( _LhsDateComponents.hour,    _RhsDateComponents.hour   );\
    XCTAssertEqual( _LhsDateComponents.second,  _RhsDateComponents.second );\
    }\

- ( void ) testCreationDateReadWriteProperty
    {
    NSError* error = nil;
    WSCKeychain* commonRandomKeychain = _WSCRandomKeychain();

    // -------------------------------------------------------------------------------------------------------------------- //
    // Test Case 0
    // -------------------------------------------------------------------------------------------------------------------- //
    WSCPassphraseItem* applicationPassphrase_testCase0 =
        [ commonRandomKeychain addApplicationPassphraseWithServiceName: @"WaxSealCore: testSetCreationDate"
                                                           accountName: @"testSetCreationDate Test Case 0"
                                                            passphrase: @"waxsealcore"
                                                                 error: &error ];

    /*******/ NSLog( @"Before modifying applicationPassphrase_testCase0: %@", [ applicationPassphrase_testCase0 creationDate ] ); /*******/

    NSDate* newDate0_testCase0 = [ NSDate dateWithString: @"2018-12-20 10:45:32 +0800" ];
    [ applicationPassphrase_testCase0 setCreationDate: newDate0_testCase0 ];
    WSCAssertDateEqual( newDate0_testCase0, applicationPassphrase_testCase0.creationDate );

    /*******/ NSLog( @"Modification (Test Case 0) #0: %@", [ applicationPassphrase_testCase0 creationDate ] ); /*******/

    NSDate* newDate1_testCase0 = [ NSDate distantFuture ];
    [ applicationPassphrase_testCase0 setCreationDate: newDate1_testCase0 ];
    WSCAssertDateEqual( newDate1_testCase0, applicationPassphrase_testCase0.creationDate );

    /*******/ NSLog( @"Modification (Test Case 0) #1: %@", [ applicationPassphrase_testCase0 creationDate ] ); /*******/

    NSDate* newDate2_testCase0 = [ NSDate distantPast ];
    [ applicationPassphrase_testCase0 setCreationDate: newDate2_testCase0 ];
    WSCAssertDateEqual( newDate2_testCase0, applicationPassphrase_testCase0.creationDate );

    /*******/ NSLog( @"Modification (Test Case 0) #2: %@", [ applicationPassphrase_testCase0 creationDate ] ); /*******/

    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( applicationPassphrase_testCase0.secKeychainItem );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Test Case 1
    // -------------------------------------------------------------------------------------------------------------------- //
    WSCPassphraseItem* internetPassphrase_testCase1 =
        [ commonRandomKeychain addInternetPassphraseWithServerName: @"www.waxsealcore.org"
                                                   URLRelativePath: @"testSetCreationDate/test/case/0"
                                                       accountName: @"waxsealcore"
                                                          protocol: WSCInternetProtocolTypeHTTPS
                                                        passphrase: @"waxsealcore"
                                                             error: &error ];

    /*******/ NSLog( @"Before modifying internetPassphrase_testCase1: %@", [ internetPassphrase_testCase1 creationDate ] ); /*******/

    NSDate* newDate0_testCase1 = [ NSDate date ];
    [ internetPassphrase_testCase1 setCreationDate: newDate0_testCase1 ];
    WSCAssertDateEqual( newDate0_testCase1, internetPassphrase_testCase1.creationDate );

    NSLog( @"Modification (Test Case 1) #0: %@", [ internetPassphrase_testCase1 creationDate ] );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 0: Set an invalid date
    // -------------------------------------------------------------------------------------------------------------------- //
    NSDate* tooLargeDate = [ NSDate dateWithString: @"123456-2-23 19:29:30 +0800" ];
    [ internetPassphrase_testCase1 setCreationDate: tooLargeDate ];

    WSCAssertDateEqual( [ NSDate dateWithString: @"9999-2-23 19:29:30 +0800" ], internetPassphrase_testCase1.creationDate );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 1: The keychain item: internetPassphrase_testCase1 has been already deleted
    // -------------------------------------------------------------------------------------------------------------------- //
    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( applicationPassphrase_testCase0.secKeychainItem );

    // TODO: XCTAssertFalse( applicationPassphrase_testCase0.isValid );
    XCTAssertNil( applicationPassphrase_testCase0.creationDate );

    NSLog( @"Modification (Negative Test Case 0) #0: %@", [ applicationPassphrase_testCase0 creationDate ] );
    [ applicationPassphrase_testCase0 setCreationDate: [ NSDate dateWithNaturalLanguageString: @"1998-2-8 21:23:19 +0300" ] ];
    NSLog( @"Modification (Negative Test Case 0) #1: %@", [ applicationPassphrase_testCase0 creationDate ] );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 2: The keychain: randomKeychain has been already deleted
    // -------------------------------------------------------------------------------------------------------------------- //
    [ [ WSCKeychainManager defaultManager ] deleteKeychain: commonRandomKeychain
                                                     error: nil ];

    XCTAssertFalse( internetPassphrase_testCase1.isValid );
    XCTAssertNil( internetPassphrase_testCase1.creationDate );

    NSLog( @"Modification (Negative Test Case 1) #0: %@", [ internetPassphrase_testCase1 creationDate ] );
    [ internetPassphrase_testCase1 setCreationDate: [ NSDate dateWithNaturalLanguageString: @"1998-2-8 21:23:19 +0300" ] ];
    NSLog( @"Modification (Negative Test Case 1) #1: %@", [ internetPassphrase_testCase1 creationDate ] );
    }

- ( void ) testModificationDateReadOnlyProperty
    {
    NSError* error = nil;
    WSCKeychain* commonRandomKeychain = _WSCRandomKeychain();

    // -------------------------------------------------------------------------------------------------------------------- //
    // Test Case 0
    // -------------------------------------------------------------------------------------------------------------------- //
    WSCPassphraseItem* applicationPassphrase_testCase0 =
        [ commonRandomKeychain addApplicationPassphraseWithServiceName: @"WaxSealCore: testModificationDate"
                                                           accountName: @"testModificationDate Test Case 0"
                                                            passphrase: @"waxsealcore"
                                                                 error: &error ];

    XCTAssertNotNil( applicationPassphrase_testCase0.modificationDate );
    NSLog( @"Modification Date #0: %@", applicationPassphrase_testCase0.modificationDate );

    sleep( 5 );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Test Case 1
    // -------------------------------------------------------------------------------------------------------------------- //
    WSCPassphraseItem* internetPassphrase_testCase1 =
        [ commonRandomKeychain addInternetPassphraseWithServerName: @"www.waxsealcore.org"
                                                   URLRelativePath: @"testModificationDate/test/case/1"
                                                       accountName: @"NSTongG"
                                                          protocol: WSCInternetProtocolTypeFTPS
                                                        passphrase: @"waxsealcore"
                                                             error: &error ];

    XCTAssertNotNil( internetPassphrase_testCase1.creationDate );
    NSLog( @"Modification Date #1: %@", internetPassphrase_testCase1.modificationDate );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 0: The keychain item: applicationPassphrase_testCase0 has been already deleted
    // -------------------------------------------------------------------------------------------------------------------- //
    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( applicationPassphrase_testCase0.secKeychainItem );

    // TODO: XCTAssertFalse( applicationPassphrase_testCase0.isValid );
    XCTAssertNil( applicationPassphrase_testCase0.modificationDate );

    // -------------------------------------------------------------------------------------------------------------------- //
    // Negative Test Case 1: The keychain item: internetPassphrase_testCase1 has been already deleted
    // -------------------------------------------------------------------------------------------------------------------- //
    XCTAssertTrue( internetPassphrase_testCase1.isValid );
    [ [ WSCKeychainManager defaultManager ] deleteKeychain: commonRandomKeychain
                                                     error: nil ];
    XCTAssertFalse( internetPassphrase_testCase1.isValid );
    XCTAssertNil( internetPassphrase_testCase1.modificationDate );

    if ( internetPassphrase_testCase1 )
        SecKeychainItemDelete( internetPassphrase_testCase1.secKeychainItem );
    }

- ( void ) testItemClassProperty
    {
    NSError* error = nil;

    // ----------------------------------------------------------
    // Test Case 0
    // ----------------------------------------------------------
    WSCPassphraseItem* applicationPassphrase_testCase0 =
        [ [ WSCKeychain login ] addApplicationPassphraseWithServiceName: @"WaxSealCore"
                                                            accountName: @"Test Case 0"
                                                             passphrase: @"waxsealcore"
                                                                  error: &error ];
    XCTAssertNotNil( applicationPassphrase_testCase0 );
    XCTAssertEqual( applicationPassphrase_testCase0.itemClass, WSCKeychainItemClassApplicationPassphraseItem );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );
    if ( applicationPassphrase_testCase0 )
        SecKeychainItemDelete( applicationPassphrase_testCase0.secKeychainItem );

    // ----------------------------------------------------------
    // Test Case 1
    // ----------------------------------------------------------
    WSCPassphraseItem* internetPassphrase_testCase1 =
        [ [ WSCKeychain login ] addInternetPassphraseWithServerName: @"www.waxsealcore.org"
                                                    URLRelativePath: @"testCase1"
                                                        accountName: @"Test Case 1"
                                                           protocol: WSCInternetProtocolTypeHTTPS
                                                         passphrase: @"waxsealcore"
                                                              error: &error ];
    XCTAssertNotNil( internetPassphrase_testCase1 );
    XCTAssertEqual( internetPassphrase_testCase1.itemClass, WSCKeychainItemClassInternetPassphraseItem );
    XCTAssertNil( error );
    _WSCPrintNSErrorForUnitTest( error );
    if ( internetPassphrase_testCase1 )
        SecKeychainItemDelete( internetPassphrase_testCase1.secKeychainItem );

    // TODO: Waiting for more positive and negative test case
    }

@end // WSCKeychainItemTests test case

/*================================================================================┐
|                              The MIT License (MIT)                              |
|                                                                                 |
|                           Copyright (c) 2015 Tong Guo                           |
|                                                                                 |
|  Permission is hereby granted, free of charge, to any person obtaining a copy   |
|  of this software and associated documentation files (the "Software"), to deal  |
|  in the Software without restriction, including without limitation the rights   |
|    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    |
|      copies of the Software, and to permit persons to whom the Software is      |
|            furnished to do so, subject to the following conditions:             |
|                                                                                 |
| The above copyright notice and this permission notice shall be included in all  |
|                 copies or substantial portions of the Software.                 |
|                                                                                 |
|   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    |
|    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     |
|   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   |
|     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      |
|  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  |
|  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  |
|                                    SOFTWARE.                                    |
└================================================================================*/