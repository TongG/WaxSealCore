///:
/*****************************************************************************
 **                                                                         **
 **                               .======.                                  **
 **                               | INRI |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                      .========'      '========.                         **
 **                      |   _      xxxx      _   |                         **
 **                      |  /_;-.__ / _\  _.-;_\  |                         **
 **                      |     `-._`'`_/'`.-'     |                         **
 **                      '========.`\   /`========'                         **
 **                               | |  / |                                  **
 **                               |/-.(  |                                  **
 **                               |\_._\ |                                  **
 **                               | \ \`;|                                  **
 **                               |  > |/|                                  **
 **                               | / // |                                  **
 **                               | |//  |                                  **
 **                               | \(\  |                                  **
 **                               |  ``  |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                               |      |                                  **
 **                   \\    _  _\\| \//  |//_   _ \// _                     **
 **                  ^ `^`^ ^`` `^ ^` ``^^`  `^^` `^ `^                     **
 **                                                                         **
 **                       Copyright (c) 2014 Tong G.                        **
 **                          ALL RIGHTS RESERVED.                           **
 **                                                                         **
 ****************************************************************************/

#import <XCTest/XCTest.h>

#import "WSCKeychain.h"
#import "WSCKeychainManager.h"
#import "NSURL+WSCKeychainURL.h"
#import "WSCKeychainError.h"
#import "WSCKeychainErrorPrivate.h"

// --------------------------------------------------------
#pragma mark Interface of WSCKeychainManagerTests case
// --------------------------------------------------------
@interface WSCKeychainManagerTests : XCTestCase <NSFileManagerDelegate>
    {
@private
    WSCKeychain*    _publicKeychain;

    NSFileManager*  _defaultFileManager;
    NSString*       _passwordForTest;

    /* Collection of random URLs been generated by -[ WSCKeychainTests randomURLForKeychain ] method
     * we will clear it in -[ WSCKeychainTests tearDown ] method
     */
    NSMutableSet*   _randomURLsAutodeletePool;

    WSCKeychainManager* testManager1;
    WSCKeychainManager* testManager2;
    WSCKeychainManager* testManager3;
    }

@property ( nonatomic, retain ) WSCKeychain* publicKeychain;

@property ( nonatomic, unsafe_unretained ) NSFileManager* defaultFileManager;
@property ( nonatomic, copy ) NSString* passwordForTest;

@property ( nonatomic, retain ) NSMutableSet* randomURLsAutodeletePool;

@property ( nonatomic, retain ) WSCKeychainManager* testManager1;
@property ( nonatomic, retain ) WSCKeychainManager* testManager2;
@property ( nonatomic, retain ) WSCKeychainManager* testManager3;

@end

#pragma mark WSCKeychainTests + WSCKeychainManagerTests
@interface WSCKeychainManagerTests ( WSCKeychainManagerDelegateTests ) <WSCKeychainManagerDelegate>

- ( BOOL ) keychainManager: ( WSCKeychainManager* )_KeychainManager
      shouldDeleteKeychain: ( WSCKeychain* )_Keychain;

- ( BOOL ) keychainManager: ( WSCKeychainManager* )_KeychainManager
   shouldProceedAfterError: ( NSError* )_Error
          deletingKeychain: ( WSCKeychain* )_Keychain;
@end

@implementation WSCKeychainManagerTests ( WSCKeychainManagerDelegateTests )

- ( NSInteger ) extractNumberFromTestCaseKeychain: ( WSCKeychain* )_Keychain
    {
    NSArray* pathComponents = [ [ _Keychain.URL lastPathComponent ] componentsSeparatedByString: @"_" ];
    NSString* lastComponents = [ pathComponents.lastObject stringByDeletingPathExtension ];

    NSInteger number = 0;

    NSString* testCasePrefix = @"testCase";
    NSString* negativeTestCasePrefix = @"negativeTestCase";
    if ( [ lastComponents hasPrefix: testCasePrefix ] )
        number = [ lastComponents substringFromIndex: testCasePrefix.length ].integerValue;
    else
        number = [ lastComponents substringFromIndex: negativeTestCasePrefix.length ].integerValue;

    return number;
    }

- ( BOOL ) keychainManager: ( WSCKeychainManager* )_KeychainManager
      shouldDeleteKeychain: ( WSCKeychain* )_Keychain
    {
    if ( _KeychainManager == [ WSCKeychainManager defaultManager ]
            || _KeychainManager == self.testManager1
            || _KeychainManager == self.testManager3 )
        return YES;
    else
        return NO;
    }

- ( BOOL ) keychainManager: ( WSCKeychainManager* )_KeychainManager
   shouldProceedAfterError: ( NSError* )_Error
          deletingKeychain: ( WSCKeychain* )_Keychain
    {
    if ( _KeychainManager == [ WSCKeychainManager defaultManager ]
            || _KeychainManager == self.testManager1 )
        return YES;
    else
        return NO;
    }

@end // WSCKeychainTests + WSCKeychainManagerTests

// --------------------------------------------------------
#pragma mark Interface of Utilities for Easy to Test
// --------------------------------------------------------
@interface WSCKeychainManagerTests ( WSCEasyToTest )

- ( NSURL* ) randomURLForKeychain;

- ( WSCKeychain* ) randomKeychain;

- ( NSURL* ) URLForTestCase: ( NSString* )_TestCase
                 doesPrompt: ( BOOL )_DoesPrompt
               deleteExists: ( BOOL )_DeleteExits;

- ( BOOL ) moveKeychain: ( WSCKeychain* )_Keychain
                  toURL: ( NSURL* )_DstURL
                  error: ( NSError** )_Error;

@end // WSCKeychainTests + WSCEasyToTest

@implementation WSCKeychainManagerTests

@synthesize publicKeychain = _publicKeychain;
@synthesize defaultFileManager = _defaultFileManager;
@synthesize passwordForTest = _passwordForTest;

@synthesize randomURLsAutodeletePool = _randomURLsAutodeletePool;

- ( void ) setUp
    {
    NSError* error = nil;

    if ( error )
        NSLog( @"%@", error );

    self.defaultFileManager = [ NSFileManager defaultManager ];
    self.passwordForTest = @"waxsealcore";

    NSURL* URLForPublicKeychain = [ self URLForTestCase: NSStringFromSelector( _cmd ) doesPrompt: NO deleteExists: NO ];
    /* If the the public keychain is not already exists, create one */
    if ( ![ URLForPublicKeychain checkResourceIsReachableAndReturnError: &error ] )
        {
        self.publicKeychain = [ WSCKeychain p_keychainWithURL: URLForPublicKeychain
                                                     password: self.passwordForTest
                                               doesPromptUser: NO
                                                initialAccess: nil
                                               becomesDefault: NO
                                                        error: &error ];
        }
    else  /* If it's already here, open it */
        {
        self.publicKeychain = [ WSCKeychain keychainWithContentsOfURL: URLForPublicKeychain
                                                                error: &error ];
        if ( error )
            NSLog( @"%@", error );
        }

    self.randomURLsAutodeletePool = [ NSMutableSet set ];

    self.testManager1 = [ [ [ WSCKeychainManager alloc ] init ] autorelease ];
    self.testManager2 = [ [ [ WSCKeychainManager alloc ] init ] autorelease ];
    self.testManager3 = [ [ [ WSCKeychainManager alloc ] init ] autorelease ];

    self.testManager1.delegate = self;
    self.testManager2.delegate = self;
    self.testManager3.delegate = self;
    }

- ( void ) tearDown
    {
    [ [ WSCKeychain login ] setDefault: YES error: nil ];

    for ( NSURL* _URL in self->_randomURLsAutodeletePool )
        if ( [ _URL checkResourceIsReachableAndReturnError: nil ] )
            [ [ NSFileManager defaultManager ] removeItemAtURL: _URL error: nil ];

    [ self->_publicKeychain release ];
    [ self->_passwordForTest release ];
    [ self->_randomURLsAutodeletePool release ];

    [ self->_testManager1 release ];
    [ self->_testManager2 release ];
    [ self->_testManager3 release ];
    }

- ( void ) testDeletingKeychains
    {
    NSError* error = nil;
    BOOL isSuccess = NO;

    [ [ WSCKeychainManager defaultManager ] setDelegate: self ];

    [ [ WSCKeychainManager defaultManager ] deleteKeychains: nil
                                                      error: &error ];
    XCTAssertNotNil( error );
    XCTAssertEqualObjects( error.domain, WSCKeychainErrorDomain );
    XCTAssertEqual( error.code, WSCKeychainInvalidParametersError );
    WSCPrintNSErrorForUnitTest( error );

    [ [ WSCKeychainManager defaultManager ] deleteKeychain: nil
                                                     error: &error ];
    XCTAssertNotNil( error );
    XCTAssertEqualObjects( error.domain, WSCKeychainErrorDomain );
    XCTAssertEqual( error.code, WSCKeychainInvalidParametersError );
    WSCPrintNSErrorForUnitTest( error );

    // ----------------------------------------------------------------------------------
    // Test Case 0
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase0 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase0" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase0 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase0
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 1
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase1 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase1" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase1 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase1
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 2
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase2 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase2" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase2 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase2
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 3
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase3 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase3" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase3 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase3
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 4
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase4 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase4" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase4 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase4
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 5
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase5 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase5" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase5 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase5
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 6
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase6 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase6" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase6 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase6
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];

    // ----------------------------------------------------------------------------------
    // Test Case 7
    // ----------------------------------------------------------------------------------
    NSURL* URLForKeychan_testCase7 = [ self URLForTestCase: [ NSString stringWithFormat: @"%@_%@", NSStringFromSelector( _cmd ), @"testCase7" ]
                                                doesPrompt: NO
                                              deleteExists: YES ];

    WSCKeychain* keychain_testCase7 = [ WSCKeychain keychainWithURL: URLForKeychan_testCase7
                                                           password: self.passwordForTest
                                                      initialAccess: nil
                                                     becomesDefault: YES
                                                              error: &error ];
    XCTAssertTrue( keychain_testCase0.isValid );
    XCTAssertTrue( keychain_testCase1.isValid );
    XCTAssertTrue( keychain_testCase2.isValid );
    XCTAssertTrue( keychain_testCase3.isValid );
    XCTAssertTrue( keychain_testCase4.isValid );
    XCTAssertTrue( keychain_testCase5.isValid );
    XCTAssertTrue( keychain_testCase6.isValid );
    XCTAssertTrue( keychain_testCase7.isValid );

    isSuccess = [ [ WSCKeychainManager defaultManager ] deleteKeychain: keychain_testCase6
                                                                 error: &error ];
    XCTAssertTrue( isSuccess );
    XCTAssertNil( error );
    XCTAssertFalse( keychain_testCase6.isValid );
    WSCPrintNSErrorForUnitTest( error );

    isSuccess = [ [ WSCKeychainManager defaultManager ] deleteKeychain: keychain_testCase7
                                                                 error: &error ];
    XCTAssertTrue( isSuccess );
    XCTAssertNil( error );
    XCTAssertFalse( keychain_testCase7.isValid );
    WSCPrintNSErrorForUnitTest( error );

    NSArray* oddNumbered = @[ keychain_testCase1
                            , keychain_testCase7
                            , keychain_testCase3
                            , keychain_testCase5
                            ];

    NSArray* evenNumbered = @[ keychain_testCase6
                             , keychain_testCase0
                             , keychain_testCase2
                             , keychain_testCase4
                             ];

    isSuccess = [ [ WSCKeychainManager defaultManager ] deleteKeychains: oddNumbered
                                                                  error: &error ];
    XCTAssertTrue( isSuccess );
    XCTAssertFalse( keychain_testCase1.isValid );
    XCTAssertFalse( keychain_testCase3.isValid );
    XCTAssertFalse( keychain_testCase5.isValid );

    isSuccess = [ [ WSCKeychainManager defaultManager ] deleteKeychains: evenNumbered
                                                                  error: &error ];
    XCTAssertTrue( isSuccess );
    XCTAssertFalse( keychain_testCase0.isValid );
    XCTAssertFalse( keychain_testCase2.isValid );
    XCTAssertFalse( keychain_testCase4.isValid );
    XCTAssertFalse( keychain_testCase6.isValid );

    [ WSCKeychainManager defaultManager ].delegate = nil;

    isSuccess = [ [ WSCKeychainManager defaultManager ] deleteKeychains: oddNumbered
                                                                  error: &error ];
    XCTAssertFalse( isSuccess );
    XCTAssertFalse( keychain_testCase1.isValid );
    XCTAssertFalse( keychain_testCase3.isValid );
    XCTAssertFalse( keychain_testCase5.isValid );

    isSuccess = [ [ WSCKeychainManager defaultManager ] deleteKeychains: oddNumbered
                                                                  error: &error ];
    XCTAssertNotNil( error );
    WSCPrintNSErrorForUnitTest( error );
    XCTAssertFalse( isSuccess );

    isSuccess = [ self.testManager1 deleteKeychains: evenNumbered
                                              error: &error ];
    XCTAssertNotNil( error );
    WSCPrintNSErrorForUnitTest( error );
    XCTAssertTrue( isSuccess );

    isSuccess = [ self.testManager2 deleteKeychains: oddNumbered
                                              error: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );
    XCTAssertTrue( isSuccess );

    isSuccess = [ self.testManager3 deleteKeychains: oddNumbered
                                              error: &error ];
    XCTAssertNotNil( error );
    WSCPrintNSErrorForUnitTest( error );
    XCTAssertFalse( isSuccess );
    }

- ( void ) testRetrievingCurrentDefaultKeychain
    {
    NSError* error = nil;

    WSCKeychain* defaultKeychain_testCase0 = [ [ WSCKeychainManager defaultManager ] currentDefaultKeychain: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );

    WSCKeychain* defaultKeychain_testCase1 = [ [ WSCKeychainManager defaultManager ] currentDefaultKeychain: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );

    WSCKeychain* defaultKeychain_testCase2 = [ [ WSCKeychainManager defaultManager ] currentDefaultKeychain: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );

    WSCKeychain* defaultKeychain_testCase3 = [ self.testManager1 currentDefaultKeychain: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );

    WSCKeychain* defaultKeychain_testCase4 = [ self.testManager2 currentDefaultKeychain: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );

    WSCKeychain* defaultKeychain_testCase5 = [ self.testManager3 currentDefaultKeychain: &error ];
    XCTAssertNil( error );
    WSCPrintNSErrorForUnitTest( error );

    XCTAssertNotEqual( defaultKeychain_testCase0, defaultKeychain_testCase1 );
    XCTAssertNotEqual( defaultKeychain_testCase1, defaultKeychain_testCase2 );
    XCTAssertNotEqual( defaultKeychain_testCase2, defaultKeychain_testCase3 );
    XCTAssertNotEqual( defaultKeychain_testCase3, defaultKeychain_testCase4 );
    XCTAssertNotEqual( defaultKeychain_testCase4, defaultKeychain_testCase5 );
    XCTAssertNotEqual( defaultKeychain_testCase5, defaultKeychain_testCase0 );

    XCTAssertEqualObjects( defaultKeychain_testCase0, defaultKeychain_testCase1 );
    XCTAssertEqualObjects( defaultKeychain_testCase1, defaultKeychain_testCase2 );
    XCTAssertEqualObjects( defaultKeychain_testCase2, defaultKeychain_testCase3 );
    XCTAssertEqualObjects( defaultKeychain_testCase3, defaultKeychain_testCase4 );
    XCTAssertEqualObjects( defaultKeychain_testCase4, defaultKeychain_testCase5 );
    XCTAssertEqualObjects( defaultKeychain_testCase5, defaultKeychain_testCase0 );
    }

- ( void ) testDefaultManager
    {
    NSError* error = nil;
    NSURL* URLForSubtitles = [ NSURL URLWithString: @"file:///Users/EsquireTongG/Documents/Certificates.cer" ];
//    NSURL* dstURL = [ NSURL URLWithString: @"file:///Users/EsquireTongG" ];

    [ [ NSFileManager defaultManager ] setDelegate: self ];
    [ [ NSFileManager defaultManager ] removeItemAtURL: URLForSubtitles error: &error ];

    // ----------------------------------------------------------
    // Test Case 0
    // ----------------------------------------------------------
    WSCKeychainManager* defaultManager_testCase0 = [ WSCKeychainManager defaultManager ];
    WSCKeychainManager* defaultManager_testCase1 = [ WSCKeychainManager defaultManager ];
    WSCKeychainManager* defaultManager_testCase2 = [ WSCKeychainManager defaultManager ];

    [ defaultManager_testCase0 release ];
    [ defaultManager_testCase0 release ];
    [ defaultManager_testCase0 release ];

    [ defaultManager_testCase1 release ];
    [ defaultManager_testCase1 release ];
    [ defaultManager_testCase1 release ];

    [ defaultManager_testCase2 release ];
    [ defaultManager_testCase2 release ];
    [ defaultManager_testCase2 release ];

    [ defaultManager_testCase0 retain ];
    [ defaultManager_testCase0 retain ];
    [ defaultManager_testCase0 retain ];

    [ defaultManager_testCase1 retain ];
    [ defaultManager_testCase1 retain ];
    [ defaultManager_testCase1 retain ];

    [ defaultManager_testCase2 retain ];
    [ defaultManager_testCase2 retain ];
    [ defaultManager_testCase2 retain ];

    [ defaultManager_testCase0 autorelease ];
    [ defaultManager_testCase0 autorelease ];
    [ defaultManager_testCase0 autorelease ];

    [ defaultManager_testCase1 autorelease ];
    [ defaultManager_testCase1 autorelease ];
    [ defaultManager_testCase1 autorelease ];

    [ defaultManager_testCase2 autorelease ];
    [ defaultManager_testCase2 autorelease ];
    [ defaultManager_testCase2 autorelease ];

    XCTAssertNotNil( defaultManager_testCase0 );
    XCTAssertNotNil( defaultManager_testCase1 );
    XCTAssertNotNil( defaultManager_testCase2 );

    XCTAssertEqual( defaultManager_testCase0, defaultManager_testCase1 );
    XCTAssertEqual( defaultManager_testCase1, defaultManager_testCase2 );
    XCTAssertEqual( defaultManager_testCase2, defaultManager_testCase0 );

    // ----------------------------------------------------------
    // Negative Test Case 0
    // ----------------------------------------------------------
    WSCKeychainManager* defaultManager_negative0 = [ [ [ WSCKeychainManager alloc ] init ] autorelease ];
    WSCKeychainManager* defaultManager_negative1 = [ [ [ WSCKeychainManager alloc ] init ] autorelease ];
    WSCKeychainManager* defaultManager_negative2 = [ [ [ WSCKeychainManager alloc ] init ] autorelease ];

    XCTAssertNotNil( defaultManager_negative0 );
    XCTAssertNotNil( defaultManager_negative1 );
    XCTAssertNotNil( defaultManager_negative2 );

    XCTAssertNotEqual( defaultManager_negative0, defaultManager_negative1 );
    XCTAssertNotEqual( defaultManager_negative1, defaultManager_negative2 );
    XCTAssertNotEqual( defaultManager_negative2, defaultManager_negative0 );

    [ defaultManager_negative0 retain ];
    [ defaultManager_negative0 release ];
    [ defaultManager_negative0 retainCount ];
    [ defaultManager_negative0 retain ];
    [ defaultManager_negative0 autorelease ];

    [ defaultManager_negative1 retain ];
    [ defaultManager_negative1 release ];
    [ defaultManager_negative1 retainCount ];
    [ defaultManager_negative1 retain ];
    [ defaultManager_negative1 autorelease ];

    [ defaultManager_negative2 retain ];
    [ defaultManager_negative2 release ];
    [ defaultManager_negative2 retainCount ];
    [ defaultManager_negative2 retain ];
    [ defaultManager_negative2 autorelease ];
    }

@end // WSCKeychainManagerTests test case

// --------------------------------------------------------
#pragma mark Implementation of Utilities for Easy to Test
// --------------------------------------------------------

@implementation WSCKeychainManagerTests ( WSCEasyToTest )

- ( NSURL* ) randomURLForKeychain
    {
    srand( ( unsigned int )time( NULL ) );

    NSString* fuckString = [ NSString stringWithFormat: @"%lu", random() ];
    NSString* keychainNameWithHash = [ NSString stringWithFormat: @"%lx.keychain"
                                                                , fuckString.hash ];

    NSURL* randomURL = [ [ NSURL URLForTemporaryDirectory ] URLByAppendingPathComponent: keychainNameWithHash ];
    [ self.randomURLsAutodeletePool addObject: [ randomURL retain ] ];

    return randomURL;
    }

- ( WSCKeychain* ) randomKeychain
    {
    NSURL* randomURL = [ self randomURLForKeychain ];
    WSCKeychain* randomKeychain = [ WSCKeychain p_keychainWithURL: randomURL
                                                         password: self.passwordForTest
                                                   doesPromptUser: NO
                                                    initialAccess: nil
                                                   becomesDefault: NO
                                                            error: nil ];
    return randomKeychain;
    }

- ( NSURL* ) URLForTestCase: ( NSString* )_TestCase
                 doesPrompt: ( BOOL )_DoesPrompt
               deleteExists: ( BOOL )_DeleteExits
    {
    NSString* keychainName = [ NSString stringWithFormat: @"WSC_%@_%@.keychain"
                                                        , _DoesPrompt ? @"withPrompt" : @"nonPrompt"
                                                        , _TestCase ];

    NSURL* newURL = [ [ NSURL URLForTemporaryDirectory ] URLByAppendingPathComponent: keychainName ];

    if ( _DeleteExits )
        {
        if ( [ self.defaultFileManager fileExistsAtPath: [ newURL path ] ] )
            [ self.defaultFileManager removeItemAtURL: newURL error: nil ];
        }

    return newURL;
    }

- ( BOOL ) moveKeychain: ( WSCKeychain* )_Keychain
                  toURL: ( NSURL* )_DstURL
                  error: ( NSError** )_Error
    {
    BOOL moveSuccess = NO;

    if ( _Keychain && _DstURL )
        moveSuccess = [ [ NSFileManager defaultManager ] moveItemAtURL: _Keychain.URL
                                                                 toURL: _DstURL
                                                                 error: _Error ];
    return moveSuccess;
    }

@end // WSCKeychainManagerTests + WSCEasyToTest

//////////////////////////////////////////////////////////////////////////////

/*****************************************************************************
 **                                                                         **
 **                                                                         **
 **      █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗     **
 **    ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝     **
 **    ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗    **
 **    ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║    **
 **    ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝    **
 **     ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝     **
 **     ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░                                     **
 **     ░ ░    ░░░ ░ ░ ░        ░ ░░ ░                                      **
 **              ░     ░ ░      ░  ░                                        **
 **                    ░                                                    **
 **                                                                         **
 ****************************************************************************/